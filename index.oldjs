"use strict";

let dns = require("native-node-dns");
let server = dns.createServer();
let arp = require("node-arp");
let fs = require("fs");

let mainIp = "192.168.0.109";

let authority = { address: "1.1.1.1", port: 53, type: "udp" };

async function proxy(question, response, cb, ip) {
  console.log("proxying", question.name);
  console.log(question);

  const makeResponse = (mac) => {
    var request = dns.Request({
      question: question, // forwarding the question
      server: authority, // this is the DNS server we are asking
      timeout: 1000,
    });
    // when we get answers, append them to the response
    request.on("message", (err, msg) => {
      msg.answer.forEach((a) => {
        response.answer.push(a);
        console.log(response.answer);
      });
    });

    var modified = 0;
    // custom handlers here
    // if (question.name == "wifi.ceccun.com") {
    //   modified = 1;
    //   response.answer.push({
    //     name: question.name,
    //     type: 1,
    //     class: 1,
    //     ttl: 1,
    //     address: mainIp,
    //   });
    //   cb();
    // }
    // if (
    //   question.name.endsWith("ceccun.com") == false &&
    //   question.name != "cdn.jsdelivr.net"
    // ) {
    //   if (!fs.existsSync(`../py/devices/${mac.split(":").join("-")}`)) {
    //     modified = 1;
    //     response.answer.push({
    //       name: question.name,
    //       type: 1,
    //       class: 1,
    //       ttl: 1,
    //       address: mainIp,
    //     });
    //     cb();
    //   }
    // }
    if (modified == 0) {
      request.on("end", cb);
      request.send();
    }
  };

  arp.getMAC(ip, function (err, mac) {
    if (!err) {
      makeResponse(mac);
    }
  });
}

let async = require("async");
const { error } = require("console");

function handleRequest(request, response) {
  console.log(
    "request from",
    request.address.address,
    "for",
    request.question[0].name
  );

  let f = []; // array of functions

  // proxy all questions
  // since proxying is asynchronous, store all callbacks
  request.question.forEach((question) => {
    f.push((cb) => proxy(question, response, cb, request.address.address));
  });

  // do the proxying in parallel
  // when done, respond to the request by sending the response
  async.parallel(f, function () {
    response.send();
  });
}

server.on("request", handleRequest);

server.on("listening", () =>
  console.log("server listening on", server.address())
);
server.on("close", () => console.log("server closed", server.address()));
server.on("error", (err, buff, req, res) => console.error(err.stack));
server.on("socketError", (err, socket) => console.error(err));

server.serve(53);

// server.serve(53, mainIp);
